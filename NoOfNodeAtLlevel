  #include<bits/stdc++.h>
 using namespace std;
 
 class Graph{
     int V; // No of vertex
     list<int>*adj; // To store the adjacency list of noode
     public:
        //constructor 
        Graph(int V);
        
        //function to add edge
        void addEdge(int v , int w);
        
        //count the no of node at level l 
        int BFS(int s , int l);
 };
 
 Graph::Graph(int V)
 {
     this->V=V;
     adj = new list<int>[V];
 }
 
 void Graph::addEdge(int v , int w)
 {
     adj[v].push_back(w);
     adj[w].push_back(v);
 }
 
 int Graph::BFS(int s , int l)
 {
     //mark all as not visited
     bool* visited = new bool[V];
     int level[V];
     for(int i=0;i<V;i++){
         visited[i]=false;
         level[i]=0;
     }
     
     //create queue for BFS
     list<int>queue;
     
     // mark the current node as visited and enqueue
     visited[s]=true;
     queue.push_back(s);
     level[s]=0;
     
     while(!queue.empty())
     {
         //deque a vertex and print it
         s= queue.front();
         queue.pop_front();
         
         //get all adjacent vertex of dequeued vertex s 
         //if adjacent of it is  not visited then mark it visited and enqueue it
         for(auto i = adj[s].begin();i!=adj[s].end();++i){
             if(!visited[*i])
                {
                    //setting the level of each node with increment in level of 
                    //parent node
                level[*i]=level[s]+ 1;
                visited[*i]=true;
                queue.push_back(*i);    
                }
         }
     }
     
     int count=0;
     for(int i=0;i<V;i++){
         if(level[i]==l)
            count++;
     }
     return count;
 }
 
 int main()
{
    // Create a graph given
    // in the above diagram
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(2, 5);
 
    int level = 2;
 
    cout << g.BFS(0, level);
 
    return 0;
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
