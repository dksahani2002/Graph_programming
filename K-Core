 //K-Core
 #include<bits/stdc++.h>
 using namespace std;
 
 class Graph
 {
     int V; //No Of vertex
     list<int>*adj; //Pointer to array containing adjacency list
     public:
       Graph(int V);//Constructor
       
       //funnction to add edge
       void addEdge(int v , int w){
           adj[v].push_back(w);
           adj[w].push_back(v);
           
       }
       
       //A recursive function to print DFS starting from v
       bool DFSUtil(int , vector<bool>& , vector<int>& , int k);
       
       // Print K-Core of given graph 
       void printKcore(int k);
     
 };
 
 //A recursive function to print dfs starting from v 
 //It return true if degree of v after processing is less than k else FALSE
 //it alse update degree of adjacent if degree of v is less than k and if 
 // degree of processed become less than k 
 
 bool Graph:: DFSUtil(int v , vector<bool>&visited , vector<int>&vDegree , int k)
 {
     // mark the current node as visited and priint it 
     visited[v]=true;
     
     //recur for all the vertices adjacent to this vetices 
     list<int>::iterator i;
     for(i=adj[v].begin();i!=adj[v].end();++i){
         
        // degree of v is less than k , then degree of adjacent must be reduced
        if(vDegree[v]<k)
            vDegree[*i]--;
        
        // if adjacent is not processed , processed it 
        if(!visited[*i])
            {
                // if degree of adjacent after processing become less than k,
                // then reduce the degree of v also
                DFSUtil(*i , visited , vDegree , k);
            }
     }
     
     // return true if degree of v is less than K
     return (vDegree[v]<k);
 }
 
 Graph:: Graph(int V)
 {
     this->V=V;
     adj=new list <int>[V];
 }
 
 //Print k-core of directed graph 
 void Graph::printKcore( int k)
 {
     // Initialization 
     // mark all the vertices as not visited and not processed 
     vector<bool>visited(V , false);
     vector<bool>processed(V , false);
     
     int mindeg = INT_MAX;
     int startvertex;
     
     //stores degree of all vertices
     vector<int>vDegree(V);
     for(int i=0;i<V;i++){
         vDegree[i]=adj[i].size();
         if(vDegree[i]<mindeg){
             mindeg=vDegree[i];
             startvertex=i;
             }
     }
     DFSUtil(startvertex , visited , vDegree , k);
     
     //if Graph is disconnected 
     for(int i=0; i<V;i++)
        if(!visited[i])
            DFSUtil(i , visited , vDegree, k);
            
    //print k-core
    cout<<"k-core :\n";
    for(int v=0;v<V;v++){
        //only considering those vertex which have degree >= k after BFS
        if(vDegree[v] >= k)
        {
            cout << "\n[" << v << "]";
            
            //Traverse through adjacency list of v and print only those adjacent
            //which have degree >=k-
            list<int>::iterator i;
            for(i=adj[v].begin(); i!=adj[v].end();++i){
                if(vDegree[*i]>=k)
                    cout << " -> " << *i;
            }
            
            
        }
    }
 }
 
 int main()
{
    // Create a graph given in the above diagram
    int k = 3;
    Graph g1(9);
    g1.addEdge(0, 1);
    g1.addEdge(0, 2);
    g1.addEdge(1, 2);
    g1.addEdge(1, 5);
    g1.addEdge(2, 3);
    g1.addEdge(2, 4);
    g1.addEdge(2, 5);
    g1.addEdge(2, 6);
    g1.addEdge(3, 4);
    g1.addEdge(3, 6);
    g1.addEdge(3, 7);
    g1.addEdge(4, 6);
    g1.addEdge(4, 7);
    g1.addEdge(5, 6);
    g1.addEdge(5, 8);
    g1.addEdge(6, 7);
    g1.addEdge(6, 8);
    g1.printKcore(k);
 
    cout << endl << endl;
    
     Graph g2(13);
    g2.addEdge(0, 1);
    g2.addEdge(0, 2);
    g2.addEdge(0, 3);
    g2.addEdge(1, 4);
    g2.addEdge(1, 5);
    g2.addEdge(1, 6);
    g2.addEdge(2, 7);
    g2.addEdge(2, 8);
    g2.addEdge(2, 9);
    g2.addEdge(3, 10);
    g2.addEdge(3, 11);
    g2.addEdge(3, 12);
    g2.printKcore(k);
 
    return 0;
}
   
