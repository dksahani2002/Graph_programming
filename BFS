 #include<iostream>
 #include<list>
  using namespace std;
  
  // This class represents a directed graph using adjacency reprentation
  class Graph
  
  {
      int  V; //No. of vertices
      //pointer to array containing adjacency llist
      list <int> *adj;
      
      public : 
        Graph(int V); //constructer
        
        //function to add edge of graph
        void AddEdge(int v , int w);
        
        //print BFS traversal from source source
        void BFS(int s);     
  };
  Graph::Graph(int V)
  {
      this->V=V;    
      adj = new list<int>[V];
  }
  void Graph::AddEdge(int v , int w)
  {
      adj[v].push_back(w); // add w to v's list
  }
  void Graph::BFS(int s)
  {
      //mark all the vertices as not visited
      bool *visited = new bool[V];
      for(int i = 0 ; i<V;i++){
          visited[i]=false;
      }
      //create a queue for BFS
      list<int>queue;
      //mark the current node as visited and enqueue it      
      visited[s]=true;  
      queue.push_back(s);
      // i will be used to find all vertices of vertex s
      list<int>::iterator i;
      
      while(!queue.empty()){
          // dequeue a vertex and print it
          s=queue.front();
          cout<<s<<" ";
          queue.pop_front();
          // get all adjacent vertex of dequeued vertex s. if a adjacent has
          // not yet visited then mark it visited and enqueue it
          for(i = adj[s].begin(); i != adj[s].end(); ++i){
              if(!visited[*i]){
                  visited[*i]=true;
                  queue.push_back(*i);
              }
          }
         
      }
  } 
  int main(){
      //create a Graph
      Graph g(4);
      g.AddEdge(0, 1);
      g.AddEdge(0, 2);
      g.AddEdge(1, 2);
      g.AddEdge(2, 0);
      g.AddEdge(2, 3);
      g.AddEdge(3, 3);
      cout<<"following is breadth first traversal"<<"(starting from vertex 2)\n";
      g.BFS(2);
   
      return 0;
  }
 
