 //Mother vertex finder
 #include<bits/stdc++.h>
 using namespace std;
 
 class Graph{
     int V; //No of vertices
     list<int>*adj; // adjacency list
     
     // A recursive function to print dfs from v
     void DFSUtil(int v , vector<bool> &visited);
     public:
       Graph(int V);
       
       void addEdge(int v , int w);
       int findMother();
 };
 Graph::Graph(int V)
 {
     this->V=V;
     adj = new list<int>[V];
 }
 
 void Graph::DFSUtil(int v , vector<bool>&visited)
 {
     //mark the current node as visited
     visited[v]=true;
     
     //recur for all the vertices adjacent to this vertex
     list<int> :: iterator  i;
     for(i=adj[v].begin(); i!= adj[v].end();++i){
         if(!visited[*i])
             DFSUtil(*i , visited);
     }
 }
 
 void Graph:: addEdge(int v , int w){
     adj[v].push_back(w);
 }
 
 int Graph:: findMother()
 {
     //visited is used for dfs. initially all are initialise as not visited
     vector<bool>visited(V, false);
     
     // to store last finished vertex
        int v=0;
    // do a dfs traversal and find last finished vertex
      for(int i=0;i<V;i++){
          if(!visited[i]){
              DFSUtil(i , visited);
              v=i;
          }
      }
     //if there exist mother vertex in given graph , then v must be one 
     
     // now check if v is mother vertex basically we will check if we are able 
     // reach every vertex from vertex
     
     // reset all visited as false and do a dfs from begining from v to check 
     //if all vertices are reachable are not
     
     fill(visited.begin() , visited.end() , false);
     DFSUtil(v, visited);
     for(int i=0;i<V;i++){
         if(!visited[i])
            return -1;
     }
     return v;
    
 }
 
 int main(){
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(4, 1);
    g.addEdge(6, 4);
    g.addEdge(5, 6);
    g.addEdge(5, 2);
    g.addEdge(6, 0);
    
    cout<<"A mother vertex is "<< g.findMother();
    
    return 0;
 }
